{"version":3,"sources":["view/components/TodoForm/TodoForm.jsx","utils/hooks/useTodoValue.js","view/components/TodoList/TodoList.jsx","view/pages/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoForm","saveTodo","initialValue","useState","value","setValue","onChange","event","target","reset","useTodoValue","onSubmit","e","preventDefault","TextField","variant","placeholder","margin","Todolist","todos","deleteTodo","List","style","width","map","todo","index","ListItem","key","toString","dense","button","Checkbox","tabIndex","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","onClick","Home","setTodos","saveTodoItem","useCallback","todoText","trimmedText","trim","length","deleteTodoItem","todoIndex","newTodos","filter","_","Grid","container","item","xs","sm","alignItems","alignContent","direction","justify","Card","display","justifyContent","flexDirection","Typography","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAIaA,EAAW,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,ECFzB,SAACC,GAAkB,IAAD,EACHC,mBAASD,GADN,mBACtBE,EADsB,KACfC,EADe,KAG7B,MAAO,CACHD,QACAE,SAAU,SAACC,GACPF,EAASE,EAAMC,OAAOJ,QAE1BK,MAAO,kBAAMJ,EAAS,MDJSK,CAAa,IAAxCN,EAF4B,EAE5BA,MAAOK,EAFqB,EAErBA,MAAOH,EAFc,EAEdA,SAEtB,OACI,0BAAMK,SAAW,SAAAC,GACbA,EAAEC,iBAEFZ,EAASG,GACTK,MAEA,kBAACK,EAAA,EAAD,CACIC,QAAQ,WACRC,YAAY,WACZC,OAAO,SACPX,SAAUA,EACVF,MAAOA,M,wFEXVc,EAAW,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAC7B,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,MAAO,UAChBJ,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACP,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAMG,WAAYC,OAAK,EAACC,QAAM,GACzC,kBAACC,EAAA,EAAD,CAAUC,UAAW,EAAGC,eAAa,IACrC,kBAACC,EAAA,EAAD,CAAcC,QAASX,IACvB,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,aAAW,SACXC,QAAS,WACLpB,EAAWM,KAGf,kBAAC,IAAD,c,SChBfe,EAAO,WAAO,IAAD,EAEItC,mBAAS,IAFb,mBAEfgB,EAFe,KAERuB,EAFQ,KAIhBC,EAAeC,uBAAY,SAACC,GAC9B,IAAMC,EAAcD,EAASE,OAEzBD,EAAYE,OAAS,GACrBN,EAAS,GAAD,mBAAKvB,GAAL,CAAY2B,OAEzB,CAAC3B,IAEE8B,EAAiBL,uBAAY,SAACM,GAChC,IAAMC,EAAWhC,EAAMiC,QAAO,SAACC,EAAG3B,GAAJ,OAAcA,IAAUwB,KAEtDR,EAASS,KACV,CAAChC,IAEJ,OACI,kBAACmC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,WAAW,SAASC,aAAa,SAASC,UAAU,SACnFC,QAAQ,UACV,kBAACC,EAAA,EAAD,CAAMhD,QAAQ,WAAWO,MAAO,CAAC0C,QAAS,OAAQL,WAAY,SAAUC,aAAc,SAASK,eAAgB,SAAUC,cAAe,WACpI,kBAACC,EAAA,EAAD,CAAYpD,QAAQ,KAAKqD,MAAM,eAA/B,SACA,kBAAC,EAAD,CACInE,SAAU0C,IACd,kBAAC,EAAD,CACIxB,MAAOA,EACPC,WAAY6B,OCzBjBoB,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ceea2def.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useTodoValue from \"../../../utils/hooks/useTodoValue\";\n\nexport const TodoForm = ({saveTodo}) => {\n\n    const { value, reset, onChange } = useTodoValue('');\n\n    return (\n        <form onSubmit={ e => {\n            e.preventDefault();\n\n            saveTodo(value);\n            reset();\n        }}>\n            <TextField\n                variant=\"outlined\"\n                placeholder=\"Add todo\"\n                margin=\"normal\"\n                onChange={onChange}\n                value={value}\n            />\n\n        </form>\n    )\n}","import { useState } from 'react';\n\nexport default (initialValue) => {\n    const [value, setValue] = useState(initialValue);\n\n    return {\n        value,\n        onChange: (event) => {\n            setValue(event.target.value);\n        },\n        reset: () => setValue('')\n    };\n};","import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport {ListItem} from \"@material-ui/core\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nexport const Todolist = ({todos, deleteTodo}) => {\n    return (\n        <List style={{width: '500px'}}>\n            {todos.map((todo, index) => (\n                <ListItem key={index.toString()} dense button>\n                    <Checkbox tabIndex={-1} disableRipple />\n                    <ListItemText primary={todo} />\n                    <ListItemSecondaryAction>\n                        <IconButton\n                            aria-label=\"Delete\"\n                            onClick={() => {\n                                deleteTodo(index);\n                            }}\n                        >\n                            <DeleteIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    )\n}","import React, {useCallback, useState} from \"react\";\nimport {TodoForm} from \"../../components/TodoForm/TodoForm\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {Todolist} from \"../../components/TodoList/TodoList\";\nimport Card from \"@material-ui/core/Card\";\n\nexport const Home = () => {\n\n    const [todos, setTodos] = useState([]);\n\n    const saveTodoItem = useCallback((todoText) => {\n        const trimmedText = todoText.trim();\n\n        if (trimmedText.length > 0) {\n            setTodos([...todos, trimmedText]);\n        }\n    }, [todos])\n\n    const deleteTodoItem = useCallback((todoIndex) => {\n        const newTodos = todos.filter((_, index) => index !== todoIndex);\n\n        setTodos(newTodos);\n    }, [todos])\n\n    return (\n        <Grid container item xs={12} sm={12} alignItems='center' alignContent='center' direction='column'\n              justify='center'>\n            <Card variant='outlined' style={{display: 'flex', alignItems: 'center', alignContent: 'center',justifyContent: 'center', flexDirection: 'column' }}>\n                <Typography variant='h1' color='textPrimary'>Todos</Typography>\n                <TodoForm\n                    saveTodo={saveTodoItem}/>\n                <Todolist\n                    todos={todos}\n                    deleteTodo={deleteTodoItem}/>\n            </Card>\n        </Grid>\n    )\n};","import React from 'react';\nimport {Home} from \"./view/pages/Home/Home\";\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}